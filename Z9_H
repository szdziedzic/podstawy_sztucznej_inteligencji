{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "V-UFsJI5759M"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "COFpDTci759N"
      },
      "source": [
        "# roc curve"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "kG1IExjX759P"
      },
      "outputs": [],
      "source": [
        "np.random.seed(1)\n",
        "cancer = datasets.load_breast_cancer()\n",
        "# print description\n",
        "# print(cancer.DESCR)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "-NExavVY759Q"
      },
      "outputs": [],
      "source": [
        "# get the data\n",
        "X = cancer.data\n",
        "y = cancer.target"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "10aSV_Zj759Q"
      },
      "source": [
        "Podzielmy zbiór na część testową i treningową."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "HZU6r8ne759R",
        "outputId": "d7509cd0-da7e-4322-ffa4-a84871253d53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n",
        "\n",
        "plt.hist(y_train, alpha=0.5)\n",
        "plt.hist(y_test, alpha=0.5)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "CenLMGny759S"
      },
      "outputs": [],
      "source": [
        "from sklearn.svm import SVC\n",
        "from sklearn.linear_model import LogisticRegression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yvNubGkP759T"
      },
      "source": [
        "Zad.\n",
        "Naucz \n",
        "\n",
        "* SVC()\n",
        "* SVC(C=1, gamma=0.00001)\n",
        "* LogisticRegression(C=1)\n",
        "\n",
        "Dla wszystkich modleli wylicz:\n",
        "\n",
        "* precision    \n",
        "* recall  \n",
        "* f1-score\n",
        "* accuracy\n",
        "* roc_auc_score\n",
        "\n",
        "i narysuj krzywą roc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "eLxIgaEq759T",
        "outputId": "ab66805e-05a7-48e0-e045-9d2e062b3d5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 851
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "svc\n",
            "\n",
            "R^2: 0.9375\n",
            "recall_score: 0.9917355371900827\n",
            "f1_score: 0.963855421686747\n",
            "accuracy_score: 0.9521276595744681\n",
            "roc_score: 0.936166276057728\n",
            "\n",
            "svc_params\n",
            "\n",
            "R^2: 0.9448818897637795\n",
            "recall_score: 0.9917355371900827\n",
            "f1_score: 0.9677419354838711\n",
            "accuracy_score: 0.9574468085106383\n",
            "roc_score: 0.9436289626248922\n",
            "\n",
            "lr\n",
            "\n",
            "R^2: 0.9672131147540983\n",
            "recall_score: 0.9752066115702479\n",
            "f1_score: 0.9711934156378601\n",
            "accuracy_score: 0.9627659574468085\n",
            "roc_score: 0.9577525595164673\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "from sklearn import linear_model\n",
        "from sklearn.svm import SVC\n",
        "from sklearn import  metrics\n",
        "from sklearn.metrics import roc_auc_score\n",
        " \n",
        "models = dict()\n",
        "clf1 = SVC(probability=True)\n",
        "models['svc'] = clf1\n",
        "clf2 = SVC(C=1, gamma=0.00001, probability=True)\n",
        "models['svc_params'] = clf2\n",
        "clf3 = LogisticRegression(C=1)\n",
        "models['lr'] = clf3\n",
        " \n",
        "for _, model in models.items():\n",
        "    model.fit(X_train, y_train)\n",
        "   \n",
        "precision_score = []\n",
        "recall_score = []\n",
        "f1_score = []\n",
        "accuracy_score = []\n",
        "for name, model in models.items():\n",
        "    print( '\\n' + name + '\\n')\n",
        "    print(\"R^2: {}\".format(metrics.precision_score(y_test, model.predict(X_test)) ))\n",
        "    print(\"recall_score: {}\".format( metrics.recall_score(y_test, model.predict(X_test)) ))\n",
        "    print(\"f1_score: {}\".format( metrics.f1_score(y_test, model.predict(X_test)) ))\n",
        "    print(\"accuracy_score: {}\".format( metrics.accuracy_score(y_test, model.predict(X_test)) ))\n",
        "    print(\"roc_score: {}\".format( roc_auc_score(y_test, model.predict(X_test))))\n",
        "   \n",
        "    # calculate the fpr and tpr for all thresholds of the classification\n",
        "    probs = model.predict_proba(X_test)\n",
        "    preds = probs[:,1]\n",
        "    fpr, tpr, threshold = metrics.roc_curve(y_test, preds)\n",
        "    roc_auc = metrics.auc(fpr, tpr)\n",
        " \n",
        "    # method I: plt\n",
        "    import matplotlib.pyplot as plt\n",
        "    plt.title('Receiver Operating Characteristic')\n",
        "    plt.plot(fpr, tpr, label = '%s AUC = %0.10f' % (name, roc_auc))\n",
        "    plt.legend(loc = 'lower right')\n",
        "    plt.plot([-0.1, 1.1], [0, 1],'r--')\n",
        "    plt.xlim([-0.1, 1.1])\n",
        "    plt.ylim([-0.1, 1.1])\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.xlabel('False Positive Rate')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "LKREwUO8759V"
      },
      "outputs": [],
      "source": [
        ""
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "name": "Z09_H_roc_curve.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}